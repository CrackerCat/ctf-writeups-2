n = 572900899020416333871774257897548190887875148332377649724629936942125065954403900214957099848244171042974830846321891115307194396859686148130195132775076147750816194194669485148310306866581747110109691391312495531105927432103095764487512855459663872226168973095665437985144973023035595602765438245069834002841752496072121527638243974956820747758308700622999731497265472265365706764203471894277850225555548962683741076063801485180774626107811063013748877832840560423294386298604594493033408101188433615350326658252746536427284017654908082042006370318751764459634138015874523739235598764251156235537699918418385721276093786930034069514119606912034739140729411915149355415250809598641184778583967357160241141516039721817350339432544637530638228659667851395488664406233933526970325653567096968977127473742267040558971420711170242569029577549402889853450812286141680939789725346428838857690827772743624748319239951407607711869461490939565401926953995816761514931996533209601647238748877564442428220404985707296616973140792150179655494712897659250302854615541193197046051998966799951879589911393813337960444303479065771250762320802542931155305758806716461516379431800232991995334538124086322560806306237096858377000246068189144665458605879
x = 16158503035655503426113161923582139215996816729841729510388257123879913978158886398099119284865182008994209960822918533986492024494600106348146394391522057566608094710459034761239411826561975763233251722937911293380163746384471886598967490683174505277425790076708816190844068727460135370229854070720638780344789626637927699732624476246512446229279134683464388038627051524453190148083707025054101132463059634405171130015990728153311556498299145863647112326468089494225289395728401221863674961839497514512905495012562702779156196970731085339939466059770413224786385677222902726546438487688076765303358036256878804074494

print n.bit_length()

cands = [(0, 0)]

for bit in range(2048):
    print(bit, len(cands))
    cands_new = []
    mod = 1 << (bit + 1)
    for c in cands:
        p, q = c
        for p_c in range(2):
            for q_c in range(2):
                p_2 = (p_c << bit) + p
                q_2 = (q_c << bit) + q
                if ((p_2 ^ q_2) % mod) == (x % mod) and ((p_2 * q_2) % mod) == (n % mod):
                    cands_new.append((p_2, q_2))
    cands = cands_new

for c in cands:
    p, q = c
    if n % p == 0:
        print(p)
    if n % q == 0:
        print(q)

# PCTF{who_needs_xor_when_you_can_add_and_subtract}
