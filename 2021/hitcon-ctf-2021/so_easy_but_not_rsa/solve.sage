from Crypto.Util.number import *

Zx.<x> = ZZ[]
n, q = 263, 128

def convolution(f,g):
    return (f * g) % (x^n-1)

def balancedmod(f,q):
    g = list(((f[i] + q//2) % q) - q//2 for i in range(n))
    return Zx(g)  % (x^n-1)

enc = -53*x^262 + 17*x^261 - 45*x^260 - 8*x^259 + 48*x^258 + 51*x^257 + 57*x^256 + 43*x^255 + 58*x^254 - 18*x^253 - 61*x^252 + 39*x^251 - 48*x^250 + 6*x^249 + 17*x^248 + 13*x^247 + 13*x^246 - 14*x^245 + 22*x^244 - 43*x^243 + 24*x^242 + 8*x^241 - 33*x^240 - 16*x^239 + 37*x^238 - 57*x^237 + 45*x^236 + 43*x^235 + 28*x^234 + 55*x^233 + 14*x^232 - 58*x^231 + 62*x^230 - 44*x^229 + 11*x^228 - 51*x^227 + 10*x^226 + 3*x^225 + 13*x^224 - 14*x^223 - 48*x^222 - 6*x^221 + 39*x^220 + 12*x^219 - 9*x^218 - 36*x^217 + 51*x^216 - 36*x^215 - 43*x^214 + 56*x^213 + 21*x^212 - 51*x^211 - 34*x^210 + 14*x^209 - 24*x^208 + 38*x^207 + 30*x^206 + 46*x^205 - 31*x^204 - 54*x^203 + 46*x^202 + 54*x^201 - 46*x^200 + 49*x^199 - 31*x^198 - 14*x^197 - 19*x^196 - 29*x^195 - 24*x^194 + 29*x^193 + 5*x^192 + 19*x^191 - 18*x^190 - 49*x^189 + 14*x^188 + 34*x^187 + 36*x^186 - 39*x^185 + 24*x^184 + 46*x^183 + 26*x^182 - 33*x^181 - 8*x^180 + 34*x^179 - 22*x^178 + 32*x^177 - 20*x^176 + 29*x^175 + 59*x^174 + 13*x^173 - 37*x^172 - 48*x^171 - 23*x^170 - 46*x^169 - 56*x^168 + 58*x^167 + 46*x^166 - 42*x^165 + 56*x^164 - 3*x^163 + 14*x^162 + 51*x^161 + 32*x^160 - 39*x^159 + 23*x^158 + 62*x^157 + 16*x^156 - 11*x^155 - 63*x^154 + 25*x^153 - 40*x^152 - 12*x^151 + 51*x^150 + 5*x^149 + 39*x^148 + 45*x^147 + 29*x^146 - 42*x^145 + 16*x^144 + 49*x^143 - 38*x^142 - 14*x^141 - 10*x^140 + 13*x^139 - 34*x^138 + 56*x^137 - 16*x^136 - 24*x^135 - 38*x^134 - 57*x^133 + 43*x^132 + 9*x^131 - 30*x^130 + 8*x^129 - 17*x^128 + 61*x^127 + 29*x^126 - 36*x^125 + 44*x^124 - 16*x^123 - 12*x^122 + 34*x^121 + 55*x^120 + 38*x^119 + 23*x^118 + 41*x^117 - 10*x^116 - 45*x^115 + 18*x^114 - 2*x^113 + 19*x^112 + 11*x^111 + 53*x^110 + 14*x^109 + 19*x^108 - 58*x^107 - 21*x^106 - 10*x^105 - 23*x^104 + 22*x^103 + 35*x^102 - 45*x^101 - 31*x^100 + 20*x^99 - 49*x^98 - 2*x^97 + 23*x^96 - 20*x^95 - 62*x^94 + 16*x^93 - 24*x^92 - 6*x^91 + 34*x^90 + 50*x^89 + 13*x^88 - 30*x^87 + 16*x^86 - 62*x^85 + 50*x^84 - 6*x^83 - 44*x^82 - 58*x^81 - 9*x^80 - 54*x^79 + 41*x^78 + 3*x^77 - x^76 - 12*x^75 + 35*x^74 - 54*x^73 - 56*x^72 + 46*x^71 - 32*x^70 + 28*x^69 - 37*x^68 + 42*x^67 - 25*x^66 + 28*x^65 - 23*x^64 - 13*x^63 - 17*x^62 + 7*x^61 + 55*x^60 - 2*x^59 - 5*x^58 + 16*x^57 + 22*x^56 - 15*x^55 - 15*x^54 + 30*x^53 - 5*x^52 - 40*x^51 - 59*x^50 + 18*x^49 - 63*x^48 - 33*x^47 + 34*x^46 - 20*x^45 + 35*x^44 + 35*x^43 + 37*x^42 - 12*x^41 - 31*x^40 + 29*x^39 + 42*x^38 - 60*x^37 - 25*x^36 - 30*x^35 + 6*x^34 + 47*x^33 + 48*x^31 - 6*x^30 - 3*x^29 - 37*x^28 + 27*x^27 - 59*x^26 + 17*x^25 + 33*x^24 - 26*x^23 + 25*x^22 - 20*x^21 + 35*x^20 + 63*x^19 + 15*x^18 + 55*x^17 + 15*x^16 + 62*x^15 - 4*x^14 - 55*x^13 + 15*x^12 - 57*x^11 - 45*x^10 + 50*x^9 + 18*x^8 - 41*x^7 - 56*x^6 + 23*x^5 + 39*x^4 + 39*x^3 + 38*x^2 - 17*x + 20
pub = 20*x^262 - 7*x^261 - 35*x^260 + 17*x^259 + 42*x^258 + 10*x^257 + 30*x^256 + 60*x^255 - 41*x^254 - 30*x^253 - 17*x^252 + 62*x^251 + 61*x^250 + 7*x^249 - 20*x^248 - 6*x^247 - 50*x^246 - 61*x^245 + 45*x^244 - 43*x^243 - 25*x^242 + 5*x^241 + 17*x^240 - 13*x^239 - 51*x^238 + 32*x^237 - 28*x^236 + 15*x^235 + 38*x^234 - 40*x^233 + 5*x^232 + 4*x^231 + 16*x^230 + 46*x^229 + 3*x^228 - 51*x^227 - 32*x^226 + 14*x^225 + 39*x^224 - 27*x^223 + 52*x^222 + 45*x^221 - 6*x^220 - 64*x^219 + 9*x^218 + 51*x^217 - 52*x^216 - 14*x^215 - 25*x^214 + 14*x^213 + 11*x^212 + 52*x^211 - 24*x^210 + 44*x^209 - 34*x^208 + 13*x^207 - 12*x^206 + 39*x^205 + 33*x^204 + 6*x^203 + 51*x^202 - 47*x^201 + 61*x^200 - 47*x^199 - 22*x^198 - 8*x^197 - 26*x^196 + 19*x^195 - 16*x^194 - 24*x^193 - 17*x^192 - 50*x^191 + 9*x^190 + 8*x^189 - 4*x^188 - 60*x^187 + 16*x^186 + 23*x^185 + x^184 + 25*x^183 - x^182 + x^181 + 30*x^180 + 49*x^179 - 4*x^178 - 17*x^177 + 31*x^176 - 37*x^175 - 24*x^174 - 28*x^173 + 53*x^172 + 33*x^171 - 9*x^170 - 52*x^169 + 18*x^168 + 56*x^167 - 31*x^166 + 36*x^165 - 61*x^164 - 46*x^163 + 6*x^162 - 28*x^161 + 49*x^160 - 29*x^159 - 39*x^158 - 62*x^157 + 26*x^156 - 36*x^155 - 21*x^154 - 43*x^153 - 2*x^152 - 12*x^151 - 43*x^150 - 52*x^149 - 52*x^148 - 13*x^147 - 19*x^146 + 3*x^145 - 57*x^144 + 23*x^143 + 60*x^142 + 34*x^141 - 64*x^140 - 7*x^139 + 56*x^138 - 26*x^137 + 7*x^136 + 11*x^135 + 3*x^134 - 47*x^133 - 4*x^132 + 33*x^131 - 58*x^130 + 14*x^129 - 9*x^128 - 8*x^127 + 38*x^126 - 2*x^125 - 63*x^124 + 32*x^123 + 62*x^122 - 37*x^121 - 3*x^120 - 36*x^119 - 33*x^118 + 50*x^117 - 20*x^116 + 61*x^115 - 28*x^114 + 59*x^113 + 23*x^112 - 25*x^111 + 13*x^110 + 23*x^109 + 25*x^108 - 12*x^107 - 25*x^106 + 11*x^105 - x^104 - 59*x^103 - 59*x^102 - 44*x^101 + 60*x^100 + 44*x^99 + 15*x^98 + 36*x^97 + 36*x^96 + 53*x^95 - 2*x^94 - 19*x^93 - 52*x^92 - 28*x^91 - 22*x^90 + 4*x^89 - 51*x^88 + 50*x^87 - 64*x^86 + 45*x^85 + 33*x^84 - 13*x^83 - 8*x^82 + 5*x^81 - 2*x^80 - 53*x^79 - 64*x^78 - 37*x^77 - 27*x^76 + 60*x^75 - 24*x^74 - 54*x^73 + 34*x^72 - 23*x^71 + 20*x^70 - 23*x^69 - 35*x^68 - 8*x^67 + 20*x^66 + 40*x^65 + 23*x^64 - 12*x^63 - 39*x^62 + 18*x^61 - 10*x^60 + 18*x^58 - 7*x^57 - 45*x^56 + 30*x^55 - 45*x^54 + 6*x^53 - 57*x^52 + 34*x^51 + 57*x^50 - 8*x^49 - 6*x^48 - 38*x^47 + 32*x^46 - 43*x^45 - 10*x^44 - 11*x^43 - 36*x^42 - 45*x^41 + 61*x^40 - 24*x^39 + 36*x^38 - 6*x^37 + 4*x^36 - 55*x^35 + 46*x^34 - 38*x^33 - 4*x^32 + 39*x^31 - 19*x^30 + 55*x^29 - 28*x^28 - 47*x^27 - 58*x^26 - 62*x^25 - 33*x^24 - 40*x^23 + 30*x^22 - 30*x^21 - 47*x^20 + 25*x^19 + 31*x^18 + 34*x^17 - 18*x^16 - 5*x^15 - 35*x^14 + 52*x^13 + 13*x^12 + 25*x^11 + 40*x^10 + 16*x^9 + 50*x^8 + x^7 - 7*x^6 - 31*x^5 - 9*x^4 - 23*x^3 - 38*x^2 + 57*x - 60

answers = [
    [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 1, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, -1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 1, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, -1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 1, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, -1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 1, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, -1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 1, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, -1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, -1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, -1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, -1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0],
]

def encode(val):
    poly = 0
    for i in range(n):
        poly += ((val%3)-1) * (x^i)
        val //= 3
    return poly

for ans in answers:
    r = Zx(ans)
    res = balancedmod(enc - convolution(pub, r), q)

    coef = res.coefficients(sparse=False)
    flag = 0
    for i, v in enumerate(coef):
        flag += (v + 1) * 3^i
    
    if flag >= 0:
        print(long_to_bytes(flag))
