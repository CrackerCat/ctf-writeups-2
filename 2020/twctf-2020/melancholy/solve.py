from ast import literal_eval
from collections import defaultdict
import itertools

p = 168144747387516592781620466787069575171940752179672411574452734808497653671359884981272746489813635225263167370526619987842319278446075098036112998679570069486935297242638675590736039429506131690941660748942375274820626186241210376537247501823653926524570571499198040207829317830442983944747691656715907048411
q = 84072373693758296390810233393534787585970376089836205787226367404248826835679942490636373244906817612631583685263309993921159639223037549018056499339785034743467648621319337795368019714753065845470830374471187637410313093120605188268623750911826963262285285749599020103914658915221491972373845828357953524205
g = 2
h = 98640592922797107093071054876006959817165651265269454302952482363998333376245900760045606011965672215605936345612030149799453733708430421685495677502147392514542499678987737269487279698863617849581626352877756515435930907093553607392143564985566046429416461073375036461770604488387110385404233515192951025299

subgroup = 19*5*3*2
assert (p-1)%subgroup == 0

def into_subgroup(n):
	return pow(n, (p-1)//subgroup, p)

ctexts = []
with open('ciphertext.txt') as f:
	for line in f:
		ctexts.append(literal_eval(line))

subg = into_subgroup(g)
subh = into_subgroup(h)
subx = None
for x in range(subgroup):
	if pow(subg, x, p) == subh:
		subx = x
		break

out = defaultdict(list)
for x in range(127, 31, -1):
	out[into_subgroup(x)].append(x)

print('subx =', subx)

flag = []
for c1, c2 in ctexts:
	c1 = into_subgroup(c1)
	c2 = into_subgroup(c2)
	pad = pow(c1, subx, p)
	m = c2 * pow(pad, -1, p) % p
	m = out[m]
	flag.append(m)

print(flag)

w = max(map(len, flag))
for i in range(w):
	s = ''
	for x in flag:
		s += chr(x[i]) if i < len(x) else ' '
	print(repr(s))
