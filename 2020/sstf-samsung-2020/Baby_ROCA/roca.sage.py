

# This file was *autogenerated* from the file roca.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_1172182071079403612819460591410436801254598455663212814122676976455521772943555586683995840410187689112480076452984704299817334381387842689748983063082229411869124571739688203711476164271691372368112347398301683214529319606705993490175490698699529245499839 = Integer(1172182071079403612819460591410436801254598455663212814122676976455521772943555586683995840410187689112480076452984704299817334381387842689748983063082229411869124571739688203711476164271691372368112347398301683214529319606705993490175490698699529245499839); _sage_const_136798100663240822199584482903026244896116416344106704058806838213895795474149605111042853590 = Integer(136798100663240822199584482903026244896116416344106704058806838213895795474149605111042853590); _sage_const_51693683179068137641702024930559289580874279697128737964619897244540414690590 = Integer(51693683179068137641702024930559289580874279697128737964619897244540414690590); _sage_const_5 = Integer(5); _sage_const_6 = Integer(6); _sage_const_65537 = Integer(65537); _sage_const_2 = Integer(2); _sage_const_100 = Integer(100); _sage_const_0p5 = RealNumber('0.5')
import time

def coppersmith_howgrave_univariate(pol, modulus, beta, mm, tt, XX):
    """
    Coppersmith revisited by Howgrave-Graham
    
    finds a solution if:
    * b|modulus, b >= modulus^beta , 0 < beta <= 1
    * |x| < XX
    """
    #
    # init
    #
    dd = pol.degree()
    nn = dd * mm + tt

    #
    # checks
    #
    if not _sage_const_0  < beta <= _sage_const_1 :
        raise ValueError("beta should belongs in (0, 1]")

    if not pol.is_monic():
        raise ArithmeticError("Polynomial must be monic.")

    #
    # calculate bounds and display them
    #
    """
    * we want to find g(x) such that ||g(xX)|| <= b^m / sqrt(n)

    * we know LLL will give us a short vector v such that:
    ||v|| <= 2^((n - 1)/4) * det(L)^(1/n)

    * we will use that vector as a coefficient vector for our g(x)
    
    * so we want to satisfy:
    2^((n - 1)/4) * det(L)^(1/n) < N^(beta*m) / sqrt(n)
    
    so we can obtain ||v|| < N^(beta*m) / sqrt(n) <= b^m / sqrt(n)
    (it's important to use N because we might not know b)
    """
   
    #
    # Coppersmith revisited algo for univariate
    #

    # change ring of pol and x
    polZ = pol.change_ring(ZZ)
    x = polZ.parent().gen()

    # compute polynomials
    gg = []
    for ii in range(mm):
        for jj in range(dd):
            gg.append((x * XX)**jj * modulus**(mm - ii) * polZ(x * XX)**ii)
    for ii in range(tt):
        gg.append((x * XX)**ii * polZ(x * XX)**mm)
    
    # construct lattice B
    BB = Matrix(ZZ, nn)

    for ii in range(nn):
        for jj in range(ii+_sage_const_1 ):
            BB[ii, jj] = gg[ii][jj]

    # LLL
    BB = BB.LLL()

    # transform shortest vector in polynomial    
    new_pol = _sage_const_0 
    for ii in range(nn):
        new_pol += x**ii * BB[_sage_const_0 , ii] / XX**ii

    # factor polynomial
    potential_roots = new_pol.roots()
    #print "potential roots:", potential_roots

    # test roots
    roots = []
    for root in potential_roots:
        if root[_sage_const_0 ].is_integer():
            roots.append(ZZ(root[_sage_const_0 ]))

    # 
    return roots

N = _sage_const_1172182071079403612819460591410436801254598455663212814122676976455521772943555586683995840410187689112480076452984704299817334381387842689748983063082229411869124571739688203711476164271691372368112347398301683214529319606705993490175490698699529245499839 

M = _sage_const_136798100663240822199584482903026244896116416344106704058806838213895795474149605111042853590 
M_ = _sage_const_51693683179068137641702024930559289580874279697128737964619897244540414690590 

m = _sage_const_5 
t = _sage_const_6 

c = discrete_log(Mod(N, M), Mod(_sage_const_65537 , M))
c_ = discrete_log(Mod(N, M_), Mod(_sage_const_65537 , M_))

o = Mod(_sage_const_65537 , M).multiplicative_order()
o_ = Mod(_sage_const_65537 , M_).multiplicative_order()

print(Integer(c_/_sage_const_2 ), Integer(floor((c_+o_)/_sage_const_2  + _sage_const_1 )))
print()

for a in range((c_+o_)//_sage_const_2  + _sage_const_1 , c_//_sage_const_2  - _sage_const_1 , -_sage_const_1 ):
    if a % _sage_const_100  == _sage_const_0 :
        print(a)
    P = PolynomialRing(Zmod(N), names=('x',)); (x,) = P._first_ngens(1)
    f = x + inverse_mod(M_,N) * Integer(pow(_sage_const_65537 ,a,M_))
    B = _sage_const_0p5 
    X = ceil(_sage_const_2 *N**B/M_)
    k = coppersmith_howgrave_univariate(f, N, B, m, t, X)
    if len(k) > _sage_const_0 :
        print(k)
        p = k[_sage_const_0 ]*M_+ Integer(pow(_sage_const_65537 ,a,M_))
        if N%p == _sage_const_0 :
            print(p, N/p)
            exit()


